package GUI;

import Logica.NodoPieza;
import Logica.Jugador;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.LinkedList;
import javax.swing.JOptionPane;

public class JFMainOthello extends javax.swing.JFrame implements ActionListener {

    ArrayList<NodoPieza> listaPiezas = new ArrayList<>();

    public ArrayList<Jugador> listaJugadores = new ArrayList<>();
//    public int PiezasNegras = 0;

    public JFMainOthello() {

        initComponents();
//        this.setLocationRelativeTo(null);
//        this.setResizable(false);

        for (int i = 0; i < 64; i++) { // crea los 64 botones(tabla de juego)
            NodoPieza pieza = new NodoPieza();
            pieza.addActionListener(this);
            int fila = (i / 8) % 2;
            if (fila == 0) {
                pieza.setBackground(i % 2 == 0 ? Color.BLUE.brighter().brighter() : Color.BLUE.brighter().brighter());
            } else {
                pieza.setBackground(i % 2 == 0 ? Color.BLUE.brighter().brighter(): Color.BLUE.brighter().brighter());
            }
            jPanelTablaJuego.add(pieza);
            listaPiezas.add(pieza);
        }
        IniciarNodos();
        iniciarTablero();
        PiezasNegras();
        PiezasBlancas();
        verGanador();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelTablaJuego = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        label = new javax.swing.JLabel();
        Jugador = new javax.swing.JLabel();
        lblJugadorUno = new javax.swing.JLabel();
        lblJugadorDos = new javax.swing.JLabel();
        lblPiezasNegras = new javax.swing.JLabel();
        lblPiezasBlancas = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuJuego = new javax.swing.JMenu();
        jMenuItemRestart = new javax.swing.JMenuItem();
        jMenuItemSalir = new javax.swing.JMenuItem();
        jMenuAyuda = new javax.swing.JMenu();
        jMenuItemInfo = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanelTablaJuego.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 12)); // NOI18N
        jPanelTablaJuego.setLayout(new java.awt.GridLayout(8, 8));
        getContentPane().add(jPanelTablaJuego, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 8, 710, 510));

        label.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        label.setText("Juega: ");

        Jugador.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N

        lblJugadorUno.setFont(new java.awt.Font("Arial", 3, 18)); // NOI18N
        lblJugadorUno.setText("P1");

        lblJugadorDos.setFont(new java.awt.Font("Arial", 3, 18)); // NOI18N
        lblJugadorDos.setText("P2");

        lblPiezasNegras.setFont(new java.awt.Font("Arial", 3, 18)); // NOI18N
        lblPiezasNegras.setText("Negras");

        lblPiezasBlancas.setFont(new java.awt.Font("Arial", 3, 18)); // NOI18N
        lblPiezasBlancas.setText("Blancas");

        jLabel1.setFont(new java.awt.Font("Arial", 3, 18)); // NOI18N
        jLabel1.setText("Piezas negras:");

        jLabel2.setFont(new java.awt.Font("Arial", 3, 18)); // NOI18N
        jLabel2.setText("Piezas blancas:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Jugador, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblJugadorDos)
                    .addComponent(lblJugadorUno))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 100, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(48, 48, 48)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPiezasBlancas)
                    .addComponent(lblPiezasNegras))
                .addGap(30, 30, 30))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(jLabel1))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(lblPiezasNegras)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPiezasBlancas)))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(lblJugadorUno)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblJugadorDos, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addGap(16, 16, 16)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(Jugador, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(label)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 540, 720, 60));

        jMenuJuego.setText("Juego");
        jMenuJuego.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 12)); // NOI18N

        jMenuItemRestart.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 12)); // NOI18N
        jMenuItemRestart.setText("Reiniciar");
        jMenuItemRestart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemRestartActionPerformed(evt);
            }
        });
        jMenuJuego.add(jMenuItemRestart);

        jMenuItemSalir.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 12)); // NOI18N
        jMenuItemSalir.setText("Salir");
        jMenuItemSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSalirActionPerformed(evt);
            }
        });
        jMenuJuego.add(jMenuItemSalir);

        jMenuBar1.add(jMenuJuego);

        jMenuAyuda.setText("Ayuda");
        jMenuAyuda.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 12)); // NOI18N

        jMenuItemInfo.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 12)); // NOI18N
        jMenuItemInfo.setText("Informacion");
        jMenuItemInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemInfoActionPerformed(evt);
            }
        });
        jMenuAyuda.add(jMenuItemInfo);

        jMenuBar1.add(jMenuAyuda);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents


    /**
     * m√©todo para salir de la partida 
     * @param evt evento de salida de la partida
     */
    private void jMenuItemSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSalirActionPerformed
        Login ventana = new Login();
        ventana.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jMenuItemSalirActionPerformed

    /**
     * m√©todo para informaci√≥n de la partida
     * @param evt evento de informaci√≥n sobre la partida
     */
    private void jMenuItemInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemInfoActionPerformed
        Ayuda ayuda = new Ayuda(this, true);
        ayuda.setVisible(true);
    }//GEN-LAST:event_jMenuItemInfoActionPerformed

    /**
     * m√©todo para reiniciar la partida jugada y guardar sus datos en un txt 
     * @param evt evento de partida nueva
     */
    private void jMenuItemRestartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemRestartActionPerformed
        this.dispose();
        JFMainOthello nuevo = new JFMainOthello();
        nuevo.setVisible(true);
        FileWriter fichero = null;
        PrintWriter pw = null;
        try {
            fichero = new FileWriter("fichero.txt");
            pw = new PrintWriter(fichero);
            pw.println("Jugador: - " + lblJugadorUno.getText() + "- piezas negras: " + lblPiezasNegras.getText() + " piezas blancas: " + lblPiezasBlancas.getText());
            pw.println("Jugador 2: - " + lblJugadorDos.getText() + "- piezas negras: " + lblPiezasNegras.getText() + " piezas blancas: " + lblPiezasBlancas.getText());
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (null != fichero) {
                    fichero.close();
                }
            } catch (Exception e2) {
                e2.printStackTrace();
            }
        }
        iniciarTablero();
    }//GEN-LAST:event_jMenuItemRestartActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFMainOthello.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFMainOthello.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFMainOthello.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFMainOthello.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFMainOthello().setVisible(true);
            }
        });
    }

    /**
     * variables de la interfase del juego
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Jugador;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenuAyuda;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItemInfo;
    private javax.swing.JMenuItem jMenuItemRestart;
    private javax.swing.JMenuItem jMenuItemSalir;
    private javax.swing.JMenu jMenuJuego;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelTablaJuego;
    private javax.swing.JLabel label;
    public javax.swing.JLabel lblJugadorDos;
    public javax.swing.JLabel lblJugadorUno;
    public javax.swing.JLabel lblPiezasBlancas;
    public javax.swing.JLabel lblPiezasNegras;
    // End of variables declaration//GEN-END:variables
    public String girar = "b";
    public int PiezasNegras = 0;
    public int PiezasBlancas = 0;
    ArrayList<Integer> disponible = new ArrayList<>();
    ArrayList<Integer> usadas = new ArrayList<>();
    String colorIcono = "/Images/PiezaOscura.png";

    /**
     * m√©todo que crea los nodos centrales, sin contar los bordes
     * @param i
     * @param siguienteR
     * @param anteriorR 
     */
    private void creacionNodoMedio(int i, int siguienteR, int anteriorR) {
        listaPiezas.get(i).setNorte(listaPiezas.get(anteriorR));
        listaPiezas.get(i).setNoroeste(listaPiezas.get(anteriorR - 1));
        listaPiezas.get(i).setNoreste(listaPiezas.get(anteriorR + 1));
        listaPiezas.get(i).setOeste(listaPiezas.get(i - 1));
        listaPiezas.get(i).setEste(listaPiezas.get(i + 1));
        listaPiezas.get(i).setSuroeste(listaPiezas.get(siguienteR - 1));
        listaPiezas.get(i).setSur(listaPiezas.get(siguienteR));
        listaPiezas.get(i).setSureste(listaPiezas.get(siguienteR + 1));
    }

    /**
     * m√©todo que inicializa el tablero de la partida
     */
    public final void iniciarTablero() {
        for (NodoPieza piece : listaPiezas) {
            piece.setEnabled(false);
        }
        // w = para las piezas blancas
        // b = para las piezas negras
        // n = para las piezas vacias
        listaPiezas.get(27).setEnabled(true);
        listaPiezas.get(27).setNodoColor("w");
        listaPiezas.get(27).setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/PiezaBlanca.png")));
        listaPiezas.get(28).setEnabled(true);
        listaPiezas.get(28).setNodoColor("b");
        listaPiezas.get(28).setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/PiezaOscura.png")));
        listaPiezas.get(35).setEnabled(true);
        listaPiezas.get(35).setNodoColor("b");
        listaPiezas.get(35).setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/PiezaOscura.png")));
        listaPiezas.get(36).setEnabled(true);
        listaPiezas.get(36).setNodoColor("w");
        listaPiezas.get(36).setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/PiezaBlanca.png")));
        Jugador.setText("Negras");
        usadas.add(27);
        usadas.add(28);
        usadas.add(35);
        usadas.add(36);
        verificarMovimientoLegal();
    }

    /**
     * m√©todo para inicializar las fichas en el tablero de la partida
     */
    private void IniciarNodos() {

        int siguienteR = 9;
        int anteriorR = 1;
        // caso del primer nodo, esquina izquierda superior
        listaPiezas.get(0).setSur(listaPiezas.get(8));
        listaPiezas.get(0).setSureste(listaPiezas.get(9));
        listaPiezas.get(0).setEste(listaPiezas.get(1));

        for (int i = 1; i < listaPiezas.size() - 1; i++) {

            if (i < 7) { //primera fila
                listaPiezas.get(i).setOeste(listaPiezas.get(i - 1));
                listaPiezas.get(i).setEste(listaPiezas.get(i + 1));
                listaPiezas.get(i).setSuroeste(listaPiezas.get(siguienteR - 1));
                listaPiezas.get(i).setSur(listaPiezas.get(siguienteR));
                listaPiezas.get(i).setSureste(listaPiezas.get(siguienteR + 1));
                siguienteR++;
            }
            if (i == 7) {
                listaPiezas.get(i).setOeste(listaPiezas.get(i - 1));
                listaPiezas.get(i).setSuroeste(listaPiezas.get(siguienteR - 1));
                listaPiezas.get(i).setSur(listaPiezas.get(siguienteR));
                siguienteR++;
            }
            if (i > 8 && i < 15) {
                creacionNodoMedio(i, siguienteR, anteriorR);
                siguienteR++;
                anteriorR++;
            }
            if (i > 16 && i < 23) {
                creacionNodoMedio(i, siguienteR, anteriorR);
                siguienteR++;
                anteriorR++;
            }
            if (i > 24 && i < 31) {
                creacionNodoMedio(i, siguienteR, anteriorR);
                siguienteR++;
                anteriorR++;
            }
            if (i > 32 && i < 39) {
                creacionNodoMedio(i, siguienteR, anteriorR);
                siguienteR++;
                anteriorR++;
            }
            if (i > 40 && i < 47) {
                creacionNodoMedio(i, siguienteR, anteriorR);
                siguienteR++;
                anteriorR++;
            }
            if (i > 48 && i < 55) {
                creacionNodoMedio(i, siguienteR, anteriorR);
                siguienteR++;
                anteriorR++;
            }
            if (i == 15 || i == 23 || i == 31 || i == 39 || i == 47) {
                listaPiezas.get(i).setNorte(listaPiezas.get(anteriorR));
                listaPiezas.get(i).setNoroeste(listaPiezas.get(anteriorR - 1));
                listaPiezas.get(i).setOeste(listaPiezas.get(i - 1));
                listaPiezas.get(i).setOeste(listaPiezas.get(i - 1));
                listaPiezas.get(i).setSuroeste(listaPiezas.get(siguienteR - 1));
                listaPiezas.get(i).setSur(listaPiezas.get(siguienteR));
                siguienteR++;
                anteriorR++;
            }
            if (i == 55) {
                listaPiezas.get(i).setNorte(listaPiezas.get(anteriorR));
                listaPiezas.get(i).setNoroeste(listaPiezas.get(anteriorR - 1));
                listaPiezas.get(i).setOeste(listaPiezas.get(i - 1));
                listaPiezas.get(i).setOeste(listaPiezas.get(i - 1));
                listaPiezas.get(i).setSuroeste(listaPiezas.get(siguienteR - 1));
                listaPiezas.get(i).setSur(listaPiezas.get(siguienteR));
                anteriorR++;
            }
            if (i > 56) { //ultima fila
                listaPiezas.get(i).setOeste(listaPiezas.get(i - 1));
                listaPiezas.get(i).setEste(listaPiezas.get(i + 1));
                listaPiezas.get(i).setNoroeste(listaPiezas.get(anteriorR - 1));
                listaPiezas.get(i).setNorte(listaPiezas.get(anteriorR));
                listaPiezas.get(i).setNoreste(listaPiezas.get(anteriorR + 1));
                anteriorR++;
            }

            if (i == 8) {
                listaPiezas.get(i).setNorte(listaPiezas.get(0));
                listaPiezas.get(i).setNoreste(listaPiezas.get(1));
                listaPiezas.get(i).setEste(listaPiezas.get(i + 1));
                listaPiezas.get(i).setSureste(listaPiezas.get(siguienteR + 1));
                listaPiezas.get(i).setSur(listaPiezas.get(siguienteR));
                siguienteR++;
            }
            if (i == 16 || i == 24 || i == 32 || i == 40 || i == 48) {
                listaPiezas.get(i).setNorte(listaPiezas.get(anteriorR));
                listaPiezas.get(i).setNoreste(listaPiezas.get(anteriorR + 1));
                listaPiezas.get(i).setEste(listaPiezas.get(i + 1));
                listaPiezas.get(i).setSureste(listaPiezas.get(siguienteR + 1));
                listaPiezas.get(i).setSur(listaPiezas.get(siguienteR));
                siguienteR++;
                anteriorR++;
            }
            if (i == 56) {
                listaPiezas.get(i).setNorte(listaPiezas.get(anteriorR));
                listaPiezas.get(i).setEste(listaPiezas.get(i + 1));
                listaPiezas.get(i).setNoreste(listaPiezas.get(anteriorR + 1));
                anteriorR++;
            }
        }
        listaPiezas.get(63).setNorte(listaPiezas.get(55));
        listaPiezas.get(63).setNoroeste(listaPiezas.get(54));
        listaPiezas.get(63).setOeste(listaPiezas.get(62));
    }

    /**
     * m√©todo que recopila eventos del Frame
     * @param e 
     */
    @Override
    public void actionPerformed(ActionEvent e) {
        for (int i = 0; i < listaPiezas.size(); i++) {
            if (e.getSource() == listaPiezas.get(i)) {
                System.out.println(listaPiezas.get(i).getNodoColor());
                if (verPosicionUsada(i)) {
                    listaPiezas.get(i).setNodoColor(girar);
                    invertirPiezas(i);
                    PiezasNegras();
                    PiezasBlancas();
                    verGanador();
                }
            }
        }
    }

    /**
     * m√©todo para verificar movimientos permitidos en la partida
     */
    private void verificarMovimientoLegal() {

        for (int i = 0; i < listaPiezas.size(); i++) {
            if (listaPiezas.get(i).isEnabled() && listaPiezas.get(i).getNodoColor().equals(girar)) {
                verMovimientoDisponible(i);
            }
        }
        //avalible.clear();
    }

    /**
     * m√©todo que verifica la posici√≥n al oeste 
     * @param posicion posici√≥n oeste
     */
    private void verOeste(int posicion) {
        NodoPieza aux = listaPiezas.get(posicion);
        if (aux.getOeste() != null) {
            if (!aux.getOeste().getNodoColor().equals("n")) {

                while (aux.getOeste() != null && !aux.getNodoColor().equals("n") && !aux.getOeste()
                        .getNodoColor().equals(girar)) {
                    aux = aux.getOeste();
                }
                if (listaPiezas.indexOf(aux) != posicion) {
                    cambiarIcono(listaPiezas.indexOf(aux));
                    disponible.add(listaPiezas.indexOf(aux));
                }
            }
        }
    }

    /**
     * m√©todo que verifica la posici√≥n al este
     * @param posicion posici√≥n este
     */
    private void verEste(int posicion) {
        NodoPieza aux = listaPiezas.get(posicion);
        if (aux.getEste() != null) {
            if (!aux.getEste().getNodoColor().equals("n")) {

                while (aux.getEste() != null && !aux.getNodoColor().equals("n") && !aux.getEste()
                        .getNodoColor().equals(girar)) {
                    aux = aux.getEste();
                }
                if (listaPiezas.indexOf(aux) != posicion) {
                    cambiarIcono(listaPiezas.indexOf(aux));
                    disponible.add(listaPiezas.indexOf(aux));
                }
            }
        }
    }

    /**
     * m√©todo que verfica la posici√≥n al norte
     * @param posicion posici√≥n norte
     */
    private void verNorte(int posicion) {
        NodoPieza aux = listaPiezas.get(posicion);
        if (aux.getNorte() != null) {
            if ((!aux.getNorte().getNodoColor().equals("n")) && (!aux.getNorte().getNodoColor().equals(girar))) {
                while (aux.getNorte() != null && !aux.getNodoColor().equals("n") && !aux.getNorte()
                        .getNodoColor().equals(girar)) {
                    aux = aux.getNorte();
                }
                if (listaPiezas.indexOf(aux) != posicion) {
                    cambiarIcono(listaPiezas.indexOf(aux));
                    disponible.add(listaPiezas.indexOf(aux));
                }
            }
        }
    }

    /**
     * m√©todo que verifica la posici√≥n al sur
     * @param posicion posici√≥n sur
     */
    private void verSur(int posicion) {
        NodoPieza aux = listaPiezas.get(posicion);
        if (aux.getSur() != null) {
            if ((!aux.getSur().getNodoColor().equals("n"))) {

                while (aux.getSur() != null && !aux.getNodoColor().equals("n") && !aux.getSur()
                        .getNodoColor().equals(girar)) {
                    aux = aux.getSur();
                }
                if (listaPiezas.indexOf(aux) != posicion) {
                    cambiarIcono(listaPiezas.indexOf(aux));
                    disponible.add(listaPiezas.indexOf(aux));
                }
            }
        }
    }

    /**
     * m√©todo que verifica la posici√≥n al noroeste
     * @param posicion posici√≥n noroeste
     */
    private void verNoroeste(int posicion) {
        NodoPieza aux = listaPiezas.get(posicion);
        if (aux.getNoroeste() != null) {
            if (!aux.getNoroeste().getNodoColor().equals("n")) {

                while (aux.getNoroeste() != null && !aux.getNodoColor().equals("n") && !aux.getNoroeste()
                        .getNodoColor().equals(girar)) {
                    aux = aux.getNoroeste();
                }
                if (listaPiezas.indexOf(aux) != posicion) {

                    cambiarIcono(listaPiezas.indexOf(aux));
                    disponible.add(listaPiezas.indexOf(aux));
                }
            }
        }
    }

    /**
     * m√©todo que verifica la posici√≥n al noreste
     * @param posicion posici√≥n noreste
     */
    private void verNoreste(int posicion) {
        NodoPieza aux = listaPiezas.get(posicion);
        if (aux.getNoreste() != null) {
            if (!aux.getNoreste().getNodoColor().equals("n")) {
                while (aux.getNoreste() != null && !aux.getNodoColor().equals("n") && !aux.getNoreste()
                        .getNodoColor().equals(girar)) {
                    aux = aux.getNoreste();
                }
                if (listaPiezas.indexOf(aux) != posicion) {
                    cambiarIcono(listaPiezas.indexOf(aux));
                    disponible.add(listaPiezas.indexOf(aux));
                }
            }
        }
    }

    /**
     * m√©todo que verifica la posici√≥n al suroeste
     * @param posicion posici√≥n suroeste
     */
    private void verSuroeste(int posicion) {
        NodoPieza aux = listaPiezas.get(posicion);
        if (aux.getSuroeste() != null) {
            if (!aux.getSuroeste().getNodoColor().equals("n")) {

                while (aux.getSuroeste() != null && !aux.getNodoColor().equals("n") && !aux.getSuroeste()
                        .getNodoColor().equals(girar)) {
                    aux = aux.getSuroeste();
                }
                if (listaPiezas.indexOf(aux) != posicion) {
                    cambiarIcono(listaPiezas.indexOf(aux));
                    disponible.add(listaPiezas.indexOf(aux));
                }
            }
        }
    }

    /**
     * m√©todo que verifica la posici√≥n al sureste
     * @param posicion posici√≥n sureste
     */
    private void verSureste(int posicion) {
        NodoPieza aux = listaPiezas.get(posicion);
        if (aux.getSureste() != null) {
            if (!aux.getSureste().getNodoColor().equals("n")) {
                try {
                    while (aux.getSureste() != null && !aux.getNodoColor().equals("n") && !aux.getSureste()
                            .getNodoColor().equals(girar)) {
                        aux = aux.getSureste();
                    }

                    if (listaPiezas.indexOf(aux) != posicion) {
                        cambiarIcono(listaPiezas.indexOf(aux));
                        disponible.add(listaPiezas.indexOf(aux));
                    }
                } catch (NullPointerException e) {
                    System.out.println("Lleg√≥ al este.");
                }
            }
        }
    }

    /**
     * m√©todo que verifica movimientos disponibles en la partida
     * @param posicion posiciones
     */
    private void verMovimientoDisponible(int posicion) {
        verNorte(posicion);
        verSur(posicion);
        verEste(posicion);
        verOeste(posicion);

        verNoreste(posicion);
        verNoroeste(posicion);

        verSureste(posicion);
        verSuroeste(posicion);
    }

    /**
     * m√©todo para cambiar el √≠cono de la ficha en las partidas
     * @param posicion posiciones
     */
    private void cambiarIcono(int posicion) {
        listaPiezas.get(posicion).setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/IconoMovimientoLegal.png")));
        listaPiezas.get(posicion).setEnabled(true);
    }

    /**
     * m√©todo para verificar si el espacio en el tablero ya fue usado en la partida
     * @param posicionUsada posiciones utilizadas
     * @return falso
     */
    private boolean verPosicionUsada(int posicionUsada) {

        for (Integer position : usadas) {
            if (listaPiezas.get(position) == listaPiezas.get(posicionUsada)) {
                return false;
            }
        }
        return true;
    }

    /**
     * m√©todo para girar las fichas encerradas entre las jugadas ejecutadas
     * @param posicion posiciones
     */
    private void invertirPiezas(int posicion) {
        usadas.add(posicion);
        for (Integer node : disponible) {
            if (listaPiezas.get(node) != listaPiezas.get(posicion)) {
                listaPiezas.get(node).setEnabled(false);
                listaPiezas.get(node).setIcon(null);
            }
        }

        disponible.clear();

        if (girar.equals("b")) {
            colorIcono = "/Images/PiezaOscura.png";
            listaPiezas.get(posicion).setIcon(new javax.swing.ImageIcon(getClass().getResource(colorIcono)));
        } else {
            colorIcono = "/Images/PiezaBlanca.png";
            listaPiezas.get(posicion).setIcon(new javax.swing.ImageIcon(getClass().getResource(colorIcono)));
        }
        cambiarColores(posicion);
        if (girar.equals("b")) {
            girar = "w";
            Jugador.setText("Blancos");
            verificarMovimientoLegal();
        } else {
            girar = "b";
            Jugador.setText("Negras");
            verificarMovimientoLegal();
        }
    }

    /**
     * m√©todo para cambiar colores en las fichas de la partida actual
     * @param posicion posiciones
     */
    private void cambiarColores(int posicion) {

        NodoPieza aux = listaPiezas.get(posicion);
        int contador = 0;
        LinkedList<Integer> nodes = new LinkedList<>();
        String girarAlRevez;

        if (girar.equals("w")) {
            girarAlRevez = "b";
        } else {
            girarAlRevez = "w";
        }

        aux = aux.getNoroeste();

        while (aux != null) {

            if (!aux.getNodoColor().equals(aux.getSureste().getNodoColor()) && aux.getNodoColor().equals(girarAlRevez)) {
                System.out.println("Revisando noroeste");
                contador++;
                nodes.add(listaPiezas.indexOf(aux));
                aux.setNodoColor(girar);
            }
            aux = aux.getNoroeste();
        }
        if (contador > 0) {
            for (Integer node : nodes) {
                listaPiezas.get(node).setIcon(new javax.swing.ImageIcon(getClass().getResource(colorIcono)));
//                listaPiezas.get(node).setNodoColor(girar);
            }
        }
        nodes.clear();
        contador = 0;
        aux = listaPiezas.get(posicion);
        aux = aux.getNoreste();

        while (aux != null) {
            if (!aux.getNodoColor().equals(aux.getSuroeste().getNodoColor()) && aux.getNodoColor().equals(girarAlRevez)) {
                System.out.println("Revisando noreste");
                contador++;
                nodes.add(listaPiezas.indexOf(aux));
                aux.setNodoColor(girar);
            }
            aux = aux.getNoreste();
        }
        if (contador > 0) {
            for (Integer node : nodes) {
                listaPiezas.get(node).setIcon(new javax.swing.ImageIcon(getClass().getResource(colorIcono)));
//                listaPiezas.get(node).setNodoColor(girar);
            }
        }
        nodes.clear();
        contador = 0;
        aux = listaPiezas.get(posicion);
        aux = aux.getSureste();

        while (aux != null) {
            if (!aux.getNodoColor().equals(aux.getNoroeste().getNodoColor()) && aux.getNodoColor().equals(girarAlRevez)) {
                System.out.println("Revisando sureste");
                contador++;
                nodes.add(listaPiezas.indexOf(aux));
                aux.setNodoColor(girar);
            }
            aux = aux.getSureste();
        }
        if (contador > 0) {
            for (Integer node : nodes) {
                listaPiezas.get(node).setIcon(new javax.swing.ImageIcon(getClass().getResource(colorIcono)));
//                listaPiezas.get(node).setNodoColor(girar);
            }
        }
        nodes.clear();
        contador = 0;

        aux = listaPiezas.get(posicion);
        aux = aux.getSuroeste();

        while (aux != null) {
            if (!aux.getNodoColor().equals(aux.getNoreste().getNodoColor()) && aux.getNodoColor().equals(girarAlRevez)) {
                System.out.println("Revisando suroeste");
                contador++;
                nodes.add(listaPiezas.indexOf(aux));
                aux.setNodoColor(girar);
            }
            aux = aux.getSuroeste();
        }
        if (contador > 0) {
            for (Integer node : nodes) {
                listaPiezas.get(node).setIcon(new javax.swing.ImageIcon(getClass().getResource(colorIcono)));
//                listaPiezas.get(node).setNodoColor(girar);
            }
        }
        nodes.clear();
        contador = 0;

        aux = listaPiezas.get(posicion);
        aux = aux.getSur();

        while (aux != null) {

            if (!aux.getNodoColor().equals(aux.getNorte().getNodoColor()) && aux.getNodoColor().equals(girarAlRevez)) {
                System.out.println("Revisando sur");
                contador++;
                nodes.add(listaPiezas.indexOf(aux));
                aux.setNodoColor(girar);
            }
            aux = aux.getSur();
        }
        if (contador > 0) {
            for (Integer node : nodes) {
                listaPiezas.get(node).setIcon(new javax.swing.ImageIcon(getClass().getResource(colorIcono)));
//                listaPiezas.get(node).setNodoColor(girar);
            }
        }
        nodes.clear();
        contador = 0;

        aux = listaPiezas.get(posicion);
        aux = aux.getEste();

        while (aux != null) {

            if (!aux.getNodoColor().equals(aux.getOeste().getNodoColor()) && aux.getNodoColor().equals(girarAlRevez)) {
                System.out.println("Revisando este");
                contador++;
                nodes.add(listaPiezas.indexOf(aux));
                aux.setNodoColor(girar);
            }
            aux = aux.getEste();
        }
        if (contador > 0) {
            for (Integer node : nodes) {
                listaPiezas.get(node).setIcon(new javax.swing.ImageIcon(getClass().getResource(colorIcono)));
//                listaPiezas.get(node).setNodoColor(girar);
            }
        }
        nodes.clear();
        contador = 0;

        aux = listaPiezas.get(posicion);
        aux = aux.getOeste();
        while (aux != null) {

            if (!aux.getNodoColor().equals(aux.getEste().getNodoColor()) && aux.getNodoColor().equals(girarAlRevez)) {
                System.out.println("Revisando oeste");
                contador++;
                nodes.add(listaPiezas.indexOf(aux));
                aux.setNodoColor(girar);
            }
            aux = aux.getOeste();
        }
        if (contador > 0) {
            for (Integer node : nodes) {
                listaPiezas.get(node).setIcon(new javax.swing.ImageIcon(getClass().getResource(colorIcono)));
//                listaPiezas.get(node).setNodoColor(girar);
            }
        }
        nodes.clear();
        contador = 0;

        aux = listaPiezas.get(posicion);
        aux = aux.getNorte();

        while (aux != null) {

            if (!aux.getNodoColor().equals(aux.getSur().getNodoColor()) && aux.getNodoColor().equals(girarAlRevez)) {
                System.out.println("Revisando norte");
                contador++;
                nodes.add(listaPiezas.indexOf(aux));
                aux.setNodoColor(girar);
            }
            aux = aux.getNorte();
        }
        if (contador > 0) {
            for (Integer node : nodes) {
                listaPiezas.get(node).setIcon(new javax.swing.ImageIcon(getClass().getResource(colorIcono)));

//                listaPiezas.get(node).setNodoColor(girar);
            }
        }
        nodes.clear();
        contador = 0;
    }

    /**
     * m√©todo que verifica la cantidad de fichas negras existentes en el tablero
     */
    public final void PiezasNegras() {
        PiezasNegras = 0;

        for (int i = 0; i < listaPiezas.size(); i++) {
            if (listaPiezas.get(i).getNodoColor().equals("b")) {
                PiezasNegras = PiezasNegras + 1;
            }
        }
        this.lblPiezasNegras.setText("" + PiezasNegras);
        System.out.println("Piezas negras: " + PiezasNegras);
    }

    /**
     * m√©todo que verifica la cantidad de fichas blancas existentes en el tablero
     */
    public final void PiezasBlancas() {
        PiezasBlancas = 0;
        for (int i = 0; i < listaPiezas.size(); i++) {
            if (listaPiezas.get(i).getNodoColor().equals("w")) {
                PiezasBlancas = PiezasBlancas + 1;
            }
        }
        this.lblPiezasBlancas.setText("" + PiezasBlancas);
        System.out.println("Piezas blancas: " + PiezasBlancas);
    }

    /**
     * m√©todo que verifica si existe un ganador en la partida actual
     */
    public final void verGanador() {
        if (usadas.size() == 63) {
            if (PiezasNegras > PiezasBlancas) {
                JOptionPane.showMessageDialog(null, "¬°El Ganador son las negras!");
            } else {
                JOptionPane.showMessageDialog(null, "¬°El Ganador son las blancas!");
            }
        }
    }
}
